#version 330 core

uniform vec4 currentColor;
uniform vec3 lightDirection;
uniform vec3 halfVector;

uniform int smoothShading;
uniform int lightOn;

in vec3 normal;
in mat3 MV;
varying vec3 mvPosition;

void main() {
    vec3 l = normalize(lightDirection);
    vec3 n = normal; // default to vertex normal

    // Use face normal for flat shading
    if (smoothShading == 0) {
        vec3 U = dFdx(mvPosition);
        vec3 V = dFdy(mvPosition);
        n = normalize(cross(U,V));
        n = transpose(MV) * n;
    }

    float ka = 0.3, kd = 0.8, ks = 0.3, shininess = 50.0;

    float diffuse = max(0.0, dot(n, l));
    float specular = max(0.0, dot(n, halfVector));

    if (diffuse == 0.0) {
        specular = 0.0;
    } else {
        specular = pow(specular, shininess);
    }

    vec3 globalAmbient = currentColor.xyz * ka;
    vec3 sourceAmbient = currentColor.xyz * vec3(0.2);
    vec3 sourceDiffuse = currentColor.xyz * vec3(0.8);
    vec3 sourceSpecular = currentColor.xyz * vec3(0.5);

    vec3 sourceScattered = (kd * sourceDiffuse * diffuse) + (ka * sourceAmbient);
    vec3 sourceReflected = ks * sourceSpecular * specular;

    if (lightOn == 0) {
        // no lights on
        gl_FragColor = vec4(0.0);
    } else if (lightOn == 1) {
        // only global ambient on
        gl_FragColor = min(vec4(globalAmbient, 1.0), vec4(1.0));
    } else if (lightOn == 2) {
        // all lights on
        gl_FragColor = vec4(globalAmbient + sourceScattered + sourceReflected, 1.0);
    }
}